% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/snapflex.R
\name{flex}
\alias{flex}
\title{Generate flexdashboards for SNAP data sets}
\usage{
flex(template, out_dir = getwd(), file = paste0(template, ".html"),
  template_params = NULL, load_static = FALSE, ...)
}
\arguments{
\item{template}{character, the ID of the flexdashboard template. See \code{\link{flex_templates}} for available IDs and descriptions.}

\item{out_dir}{character, output directory for standalone html document when \code{template} refers to a static (non-Shiny) flexdashboard.}

\item{file}{character, output file name.}

\item{template_params}{named list, additional parameters passed to a specific template if required. See \code{\link{flex_params}} for more information.}

\item{load_static}{logical, load static files automatically. See details.}

\item{...}{additional arguments passed to \code{flex_dashboard}. See details.}
}
\description{
Generate local flexdashboards for SNAP data sets from package templates.
}
\details{
This function creates a flexdashboard from an existing template provided by the package.
If a given template requires custom arguments to be provided, for example a location name,
these arguments can be passed as a named list to \code{template_params}.

Some templates produce static documents. Others use Shiny at runtime.
Flexdashboards with Shiny backend support automatically launch a local instance in the default web browser.
By contrast, the static document templates save the resulting standalone html document to \code{out_dir/<file>}, defaulting to the working directory.
In this case, \code{load_static = TRUE} will toggle on the Shiny-like automatic launch for static flexdashboards. This is off by default.

Note that static does not mean the flexdashboard html document offers no interactivity.
A template may still offer the ability to switch between different graphs and tables and explore different content.
However, all data is embedded in the document. This makes it useful as a standalone file requiring no Shiny server backend,
but it also means that more complex static templates result in larger output file sizes and they cannot achieve anywhere near the
complexity of a flexdashboard that uses Shiny.

Additional arguments passed to \code{flex_dashboard} typically include \code{theme}, \code{css} and \code{storyboard}.
Unless a given template supports it specifically, using \code{storyboard = TRUE} will not add any meaningful content.
Choice of \code{theme} is limited to those available in the \code{flexdashboard} package.
Additional CSS can be attached with \code{css}. Styling contained in a CSS file may be attached remotely via CDN (Content Delivery Network).
}
\examples{
\dontrun{
flex_params("rsds1")
pars <- list(location = "Vancouver")
flex("rsds1", template_params = pars)
flex("rsds1", template_params = pars, theme = "sandstone", storyboard = TRUE)
pars$gfont <- "Source Sans Pro"
pars$snaptheme <- "theme_snap"
flex("rsds1", template_params = pars)
}
}
\seealso{
flex_templates flex_params
}

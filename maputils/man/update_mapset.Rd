% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/maps.R
\name{update_mapset}
\alias{update_mapset}
\title{Update leaflet map in map set context}
\usage{
update_mapset(trigger, shp, mapset, ids, selected_regions, all_regions,
  all_locs, all_locs_shapefile = all_locs, default = "", click_id, session,
  map = "Map", color = "#3C8DBC", fill = color, color_opacity = 1,
  fill_opacity = 0.4)
}
\arguments{
\item{trigger}{character, \code{"selectInput"} or \code{"mapclick"}. Must used both in an app. See details.}

\item{shp}{a shapefile pertaining to a single \code{mapset}. See \code{build_mapset}.}

\item{mapset}{character, name of a mapset in \code{mapsets}. See \code{build_mapset}.}

\item{ids}{literal names of regions in \code{shp} (may not match \code{regions} elements).}

\item{selected_regions}{a subset of \code{all_regions}.}

\item{all_regions}{a named vector of region IDs pertaining to regions in \code{shp}.}

\item{all_locs}{a named list (names match \code{mapsets})
where each list element is a vector of regions.}

\item{all_locs_shapefile}{a named list (names match \code{mapsets})
where each list element is a vector of regions specified to match the region IDs in \code{shp}.}

\item{default}{name of a default map set, if used. Otherwise defaults to \code{default=""}.}

\item{click_id}{character, the leaflet map click id.}

\item{session}{the app session variable.}

\item{map}{character, name of leaflet map object.}

\item{color}{border color for selected polygons.}

\item{fill}{fill color for selected polygons.}

\item{color_opacity}{numeric, border color opacity.}

\item{fill_opacity}{numeric, fill color opacity.}
}
\value{
side effects only, called from within Shiny observers to update \code{selectInput} and leaflet output map.
}
\description{
Update an existing leaflet map in a context of multiple map sets and corresponding shapefiles.
}
\details{
This function updates a leaflet map made using \code{build_mapset}. It is called from within Shiny observers. See examples.
The function is used twice in two contexts in an app in conjunction with a single original \code{build_mapset} call for a single
leaflet output instance.
Specifically, one call is within an observer that reacts to map polygon mouse clicks
and the other call is within an observer that reacts to changes to the \code{shiny::selectInput}
that is synced to the leaflet map polygon selections.

The function takes a number of the same arguments passed to \code{build_mapset}.
Compared to \code{build_mapset}, color, fill and opacity is simplified to single values each
since this function only deals with the adding of selected polygons
to the map, not the adding of unselected polygons or polygon mouse hover options.

Note that the \code{selectInput} observer context (\code{trigger="selectInput"}) requires all arguments to be supplied except for
\code{click_id} and {session}, which are needed only for \code{trigger="mapclick"}.
In the case of the latter, the only arguments needed (or used) are
\code{trigger}, \code{click_id}, \code{session} and \code{selected_regions}. All other arguments may be left out.
Map clicks are observed strictly to update the synchronized \code{selectInput}, not to remove or add polygons directly.
In turn, changes to the \code{selectInput}, whether by the user directly, or by updating on map click observation,
are responsible for updating map polygon layers.
}
\examples{
\dontrun{
# Observe polygon selectInput.
# Add or remove selected polygons leaflet map polygons.
observeEvent(input$regions, {
  update_mapset("selectInput", shp, mapset, ids,
    input$regions, all_regions, all_locs)
}, ignoreNULL=FALSE)

# Observe leaflet map shape click.
# Update region selectInput.
observeEvent(input$Map_shape_click, {
  update_mapset("mapclick", selected_regions=input$regions,
                click_id=input$Map_shape_click$id, session=session)
})
}
}
